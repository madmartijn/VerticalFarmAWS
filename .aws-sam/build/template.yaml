Transform: AWS::Serverless-2016-10-31
Resources:
  GetKast:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetKast
      CodeUri: GetKast
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          MICROSOFTSQL_PORT:
            Ref: MicrosoftSQLPort
          MICROSOFTSQL_HOSTNAME:
            Ref: MicrosoftSQLHostname
          MICROSOFTSQL_SECRETARN:
            Ref: MicrosoftSQLSecretArn
      Policies:
      - AWSSecretsManagerGetSecretValuePolicy:
          SecretArn:
            Ref: MicrosoftSQLSecretArn
      Events:
        KastAPIGETKastKastId:
          Type: Api
          Properties:
            Path: /Kast/{KastId}
            Method: GET
            RestApiId:
              Ref: KastAPI
    Metadata:
      SamResourceId: GetKast
  GetKastLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${GetKast}
  KastAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub:
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: KastAPI
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /Kast/{KastId}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetKast.Arn}/invocations
              responses: {}
          /Lade/{LadeId}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetLade.Arn}/invocations
              responses: {}
          /Notities/{LadeId}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetNotities.Arn}/invocations
              responses: {}
          /Gewas/{LadeId}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetGewassen.Arn}/invocations
              responses: {}
          /Data/{LadeId}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetCurrentDataLade.Arn}/invocations
              responses: {}
          /Data/{LadeId}/{DateTime}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPeriodDataLade.Arn}/invocations
              responses: {}
          /TotalData:
            get:
              responses: {}
          /TotalData/{DateTime}:
            get:
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
  GetLade:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetLade
      CodeUri: GetLade
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          MICROSOFTSQL_PORT:
            Ref: MicrosoftSQLPort
          MICROSOFTSQL_HOSTNAME:
            Ref: MicrosoftSQLHostname
          MICROSOFTSQL_SECRETARN:
            Ref: MicrosoftSQLSecretArn
      Policies:
      - AWSSecretsManagerGetSecretValuePolicy:
          SecretArn:
            Ref: MicrosoftSQLSecretArn
      Events:
        KastAPIGETLadeLadeId:
          Type: Api
          Properties:
            Path: /Lade/{LadeId}
            Method: GET
            RestApiId:
              Ref: KastAPI
    Metadata:
      SamResourceId: GetLade
  GetLadeLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${GetLade}
  GetNotities:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetNotities
      CodeUri: GetNotities
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          MICROSOFTSQL_PORT:
            Ref: MicrosoftSQLPort
          MICROSOFTSQL_HOSTNAME:
            Ref: MicrosoftSQLHostname
          MICROSOFTSQL_SECRETARN:
            Ref: MicrosoftSQLSecretArn
      Policies:
      - AWSSecretsManagerGetSecretValuePolicy:
          SecretArn:
            Ref: MicrosoftSQLSecretArn
      Events:
        KastAPIGETNotitiesLadeId:
          Type: Api
          Properties:
            Path: /Notities/{LadeId}
            Method: GET
            RestApiId:
              Ref: KastAPI
    Metadata:
      SamResourceId: GetNotities
  GetNotitiesLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${GetNotities}
  GetGewassen:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetGewassen
      CodeUri: GetGewassen
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        KastAPIGETGewasLadeId:
          Type: Api
          Properties:
            Path: /Gewas/{LadeId}
            Method: GET
            RestApiId:
              Ref: KastAPI
      Environment:
        Variables:
          MICROSOFTSQL_PORT:
            Ref: MicrosoftSQLPort
          MICROSOFTSQL_HOSTNAME:
            Ref: MicrosoftSQLHostname
          MICROSOFTSQL_SECRETARN:
            Ref: MicrosoftSQLSecretArn
      Policies:
      - AWSSecretsManagerGetSecretValuePolicy:
          SecretArn:
            Ref: MicrosoftSQLSecretArn
    Metadata:
      SamResourceId: GetGewassen
  GetGewassenLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${GetGewassen}
  GetCurrentDataLade:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetCurrentDataLade
      CodeUri: GetCurrentDataLade
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        KastAPIGETDataLadeId:
          Type: Api
          Properties:
            Path: /Data/{LadeId}
            Method: GET
            RestApiId:
              Ref: KastAPI
      Environment:
        Variables:
          MICROSOFTSQL_PORT:
            Ref: MicrosoftSQLPort
          MICROSOFTSQL_HOSTNAME:
            Ref: MicrosoftSQLHostname
          MICROSOFTSQL_SECRETARN:
            Ref: MicrosoftSQLSecretArn
      Policies:
      - AWSSecretsManagerGetSecretValuePolicy:
          SecretArn:
            Ref: MicrosoftSQLSecretArn
    Metadata:
      SamResourceId: GetCurrentDataLade
  GetCurrentDataLadeLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${GetCurrentDataLade}
  GetCurrentDataTotal:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetCurrentDataTotal
      CodeUri: GetCurrentDataTotal
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
    Metadata:
      SamResourceId: GetCurrentDataTotal
  GetCurrentDataTotalLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${GetCurrentDataTotal}
  GetPeriodDataTotal:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetPeriodDataTotal
      CodeUri: GetPeriodDataTotal
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        KastAPIGETDataDateTime:
          Type: Api
          Properties:
            Path: /Data/{DateTime}
            Method: GET
            RestApiId:
              Ref: KastAPI
    Metadata:
      SamResourceId: GetPeriodDataTotal
  GetPeriodDataTotalLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${GetPeriodDataTotal}
  GetPeriodDataLade:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetPeriodDataLade
      CodeUri: GetPeriodDataLade
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        KastAPIGETDataLadeIdDateTime:
          Type: Api
          Properties:
            Path: /Data/{LadeId}/{DateTime}
            Method: GET
            RestApiId:
              Ref: KastAPI
      Environment:
        Variables:
          MICROSOFTSQL_PORT:
            Ref: MicrosoftSQLPort
          MICROSOFTSQL_HOSTNAME:
            Ref: MicrosoftSQLHostname
          MICROSOFTSQL_SECRETARN:
            Ref: MicrosoftSQLSecretArn
      Policies:
      - AWSSecretsManagerGetSecretValuePolicy:
          SecretArn:
            Ref: MicrosoftSQLSecretArn
    Metadata:
      SamResourceId: GetPeriodDataLade
  GetPeriodDataLadeLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${GetPeriodDataLade}
Metadata:
  AWS::Composer::ExternalResources:
    MicrosoftSQL:
      Type: externalRDS
      Settings:
        Port:
          Ref: MicrosoftSQLPort
        Hostname:
          Ref: MicrosoftSQLHostname
        SecretArn:
          Ref: MicrosoftSQLSecretArn
  AWS::Composer::Groups:
    Group:
      Label: Group
      Members:
      - GetKast
      - GetLade
      - GetGewassen
      - GetCurrentDataLade
      - GetPeriodDataLade
      - GetCurrentDataTotal
      - GetPeriodDataTotal
      - GetNotities
Parameters:
  MicrosoftSQLPort:
    Type: Number
    Default: 1433
  MicrosoftSQLHostname:
    Type: String
    Default: database-1.cpgsme0uejc2.eu-central-1.rds.amazonaws.com
  MicrosoftSQLSecretArn:
    Type: String
    Default: arn:aws:secretsmanager:eu-central-1:992382731338:secret:rds!db-08b378d2-fd52-4b72-a35a-53cdc01d922d-Yex8ZZ
